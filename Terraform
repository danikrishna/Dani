provider "aws" {
  region     = "us-west-2"
  access_key = "AKIASQANSBXCR5UXBZQS"
  secret_key = "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"
}
#1.create vpc
resource "aws_vpc" "my-vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
      Name = "myvpc"
  }
}
#2.create internet gate way
resource "aws_internet_gateway" "my-gw" {
  vpc_id = aws_vpc.my-vpc.id

}
#3. create custom route table
resource "aws_route_table" "my-rt" {
  vpc_id = aws_vpc.my-vpc.id

  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = aws_internet_gateway.my-gw.id
    }  

  tags = {
    Name = "myrt"
  }
}
# 4.create a subnet
resource "aws_subnet" "my-subnet" {
    vpc_id = aws_vpc.my-vpc.id
  # vpc_id = "${aws_vpc.my-vpc.id}"
    cidr_block = "10.0.1.0/24"
    availability_zone = "us-west-2a"
  tags = {
       Name = "mysubnet"
  }
}
#5.create route table association
resource "aws_route_table_association" "my-rta" {
  subnet_id      = aws_subnet.my-subnet.id
  route_table_id = aws_route_table.my-rt.id
}
# 6.create a security group to allow 3306
resource "aws_security_group" "allow_my" {
  name        = "allow_my"
  description = "Allow my inbound traffic"
  vpc_id      = aws_vpc.my-vpc.id

 

  ingress   {
	  description      = "SSH"
	  from_port        = 22
	  to_port          = 22
	  protocol         = "tcp"
	  cidr_blocks      = ["0.0.0.0/0"]
	  
	}
  
  egress  {
      from_port        = 0
      to_port          = 0
      protocol         = "-1"
      cidr_blocks      = ["0.0.0.0/0"]
      
    }
  

  tags = {
    Name = "MySG"
  }
}
#7. create a net work interface with an ip in the subnet that was created in a step4
resource "aws_network_interface" "my-nic" {
  subnet_id       = aws_subnet.my-subnet.id
  private_ips     = ["10.0.1.25"]
  security_groups = [aws_security_group.allow_my.id]

}
#8.Assign an elastic Ip to an network interface created in step 7
resource "aws_eip" "one" {
  vpc                       = true
  network_interface         = aws_network_interface.my-nic.id
  associate_with_private_ip = "10.0.1.25"
  depends_on = [aws_internet_gateway.my-gw]
}
resource "aws_instance" "my-linux" {
  ami           = "ami-00ee4df451840fa9d"
  instance_type = "t2.micro"
  availability_zone = "us-west-2a"
  key_name = "TEST_ALL"
  network_interface {
      device_index = 0
      network_interface_id = aws_network_interface.my-nic.id
  } 
}
resource "null_resource" "stop_instance" {
  provisioner "local-exec" {
    interpreter = ["PowerShell", "-Command"]
    command     = "aws ec2 stop-instances --instance-ids i-004f851ee7ca0f735"
	}
}
